// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/viniosilva/go-api/internal/gorm (interfaces: Gorm)

// Package gorm is a generated GoMock package.
package gorm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockGorm is a mock of Gorm interface.
type MockGorm struct {
	ctrl     *gomock.Controller
	recorder *MockGormMockRecorder
}

// MockGormMockRecorder is the mock recorder for MockGorm.
type MockGormMockRecorder struct {
	mock *MockGorm
}

// NewMockGorm creates a new mock instance.
func NewMockGorm(ctrl *gomock.Controller) *MockGorm {
	mock := &MockGorm{ctrl: ctrl}
	mock.recorder = &MockGormMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGorm) EXPECT() *MockGormMockRecorder {
	return m.recorder
}

// GetDB mocks base method.
func (m *MockGorm) GetDB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockGormMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockGorm)(nil).GetDB))
}

// Migrate mocks base method.
func (m *MockGorm) Migrate(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Migrate", varargs...)
}

// Migrate indicates an expected call of Migrate.
func (mr *MockGormMockRecorder) Migrate(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockGorm)(nil).Migrate), arg0...)
}
