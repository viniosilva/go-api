// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/viniosilva/go-api/repository/cat (interfaces: CatRepository)

// Package cat is a generated GoMock package.
package cat

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/viniosilva/go-api/model"
)

// MockCatRepository is a mock of CatRepository interface.
type MockCatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCatRepositoryMockRecorder
}

// MockCatRepositoryMockRecorder is the mock recorder for MockCatRepository.
type MockCatRepositoryMockRecorder struct {
	mock *MockCatRepository
}

// NewMockCatRepository creates a new mock instance.
func NewMockCatRepository(ctrl *gomock.Controller) *MockCatRepository {
	mock := &MockCatRepository{ctrl: ctrl}
	mock.recorder = &MockCatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCatRepository) EXPECT() *MockCatRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCatRepository) Create(arg0 *model.Cat) *model.Cat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*model.Cat)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCatRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCatRepository)(nil).Create), arg0)
}

// Find mocks base method.
func (m *MockCatRepository) Find() []model.Cat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find")
	ret0, _ := ret[0].([]model.Cat)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockCatRepositoryMockRecorder) Find() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCatRepository)(nil).Find))
}
